# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://kedro.readthedocs.io/en/stable/05_data/01_data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataSet
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataSet
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataSet
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different DataSet implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://kedro.readthedocs.io/en/stable/05_data/01_data_catalog.html

# INPUT DATA
articles:
  type: pandas.CSVDataSet
  filepath: data/01_raw/articles.csv
  layer: raw
  load_args:
    dtype:
      article_id: str

customers:
  type: pandas.CSVDataSet
  filepath: data/01_raw/customers.csv
  layer: raw

transactions:
  type: pandas.CSVDataSet
  filepath: data/01_raw/transactions_train.csv
  layer: raw
  load_args:
    dtype:
      article_id: str

# SAMPLE
customers_sample:
  type: pandas.CSVDataSet
  filepath: data/02_intermediate/customers_sample.csv
  layer: intermediate
  save_args:
    index: False

transactions_sample:
  type: pandas.CSVDataSet
  filepath: data/02_intermediate/transactions_sample.csv
  layer: intermediate
  save_args:
    index: False
  load_args:
    dtype:
      article_id: str

articles_sample:
  type: pandas.CSVDataSet
  filepath: data/02_intermediate/articles_sample.csv
  layer: intermediate
  save_args:
    index: False
  load_args:
    dtype:
      article_id: str
  
# RESIZING IMAGES
input_images:
  type: gid_ml_framework.extras.datasets.image_dataset.DirWithImagesDataSet
  dir: data/01_raw/images/010/
  load_args:
    img_extension: jpg

resized_images:
  type: gid_ml_framework.extras.datasets.image_dataset.DirWithImagesDataSet
  dir: data/02_intermediate/results
  save_args:
    img_extension: jpg

# EMBEDDINGS
image_embeddings:
  type: pandas.ParquetDataSet
  filepath: data/04_feature/image_embeddings.pq
  layer: feature
  load_args:
    engine: pyarrow

text_embeddings:
  type: pandas.ParquetDataSet
  filepath: data/04_feature/text_embeddings.pq
  layer: feature
  load_args:
    engine: pyarrow

# CANDIDATE GENERATION
candidates:
  type: pandas.ParquetDataSet
  filepath: data/03_primary/candidates.pq
  layer: primary
  load_args:
    engine: pyarrow

### RECALL MAXIMIZATION - CANDIDATE GENERATION
# TRAIN VAL SPLIT
train_transactions:
  type: pandas.CSVDataSet
  filepath: data/03_primary/train_transactions.csv
  layer: primary
  save_args:
    index: False
  load_args:
    dtype:
      article_id: str

val_transactions:
  type: pandas.CSVDataSet
  filepath: data/03_primary/val_transactions.csv
  layer: primary
  save_args:
    index: False
  load_args:
    dtype:
      article_id: str
  
train_candidates:
  type: pandas.ParquetDataSet
  filepath: data/03_primary/train_candidates.pq
  layer: primary
  load_args:
    engine: pyarrow

# AUTOMATED FEATURE ENGINEERING
automated_articles_features:
  type: pandas.ParquetDataSet
  filepath: data/04_feature/automated_articles_features.pq
  layer: feature
  load_args:
    engine: pyarrow

automated_customers_features:
  type: pandas.ParquetDataSet
  filepath: data/04_feature/automated_customers_features.pq
  layer: feature
  load_args:
    engine: pyarrow

# MANUAL FEATURE ENGINEERING
manual_article_features:
  type: pandas.ParquetDataSet
  filepath: data/04_feature/manual_article_features.pq
  layer: feature
  load_args:
    engine: pyarrow

manual_customer_features:
  type: pandas.ParquetDataSet
  filepath: data/04_feature/manual_customer_features.pq
  layer: feature
  load_args:
    engine: pyarrow

manual_customer_prod_group_features:
  type: pandas.ParquetDataSet
  filepath: data/04_feature/manual_customer_prod_group_features.pq
  layer: feature
  load_args:
    engine: pyarrow

# CANDIDATES FEATURE ENGINEERING
jaccard_similarity_features:
  type: pandas.ParquetDataSet
  filepath: data/05_model_input/jaccard_similarity_features.pq
  layer: model_input
  load_args:
    engine: pyarrow

image_cosine_similarity_features:
  type: pandas.ParquetDataSet
  filepath: data/05_model_input/image_cosine_similarity_features.pq
  layer: model_input
  load_args:
    engine: pyarrow

text_cosine_similarity_features:
  type: pandas.ParquetDataSet
  filepath: data/05_model_input/text_cosine_similarity_features.pq
  layer: model_input
  load_args:
    engine: pyarrow

candidates_similarity_features:
  type: pandas.ParquetDataSet
  filepath: data/05_model_input/candidates_similarity_features.pq
  layer: model_input
  load_args:
    engine: pyarrow

# recommendations
recommendations:
  type: pandas.ParquetDataSet
  filepath: data/07_model_output/recommendations.pq
  layer: model_output
  load_args:
    engine: pyarrow
